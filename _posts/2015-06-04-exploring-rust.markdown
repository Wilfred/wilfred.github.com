--- 
layout: post
title: "Exploring Rust"
---

Rust recently released 1.0, so it's a perfect time to see what the
language has to offer.

To explore the language, I wrote a
[multi-threaded web crawler](https://github.com/Wilfred/linkdoc) that
would find any broken links on a website.

## The dependency tooling

The first striking feature of Rust is Cargo. Cargo is a package
manager for Rust, and also generates project skeletons to get you started.

Cargo works amazingly well. It's a stark contrast to programming in C
and C++, providing canonical answers to questions like:

* How do I depend on external libraries?
* How do I upgrade those dependencies when new versions are released?
* How do I discover libraries that could help me with my
current project?
* How do I work on two projects which depend on different versions of
the same library?
* How do I distinguish between direct dependencies I need and indirect
dependencies that I happen to use?

If Rust had no other interesting features, the usefulness of Cargo
makes Rust very attractive. The closest alternative is
[biicode](https://www.biicode.com/), a C/C++ dependencies manager that
hasn't gained much traction. By contrast,
the [Rust package repository](https://crates.io/) is now
[growing faster than Haskell's hackage](http://www.modulecounts.com/)!

## The documentation

The Rust docs are excellent. Every major feature in the standard
library has an example, which is delightful. With one click, you can
even compile and run the example in the Rust playground.

Autogenerated, but stil good

attractive, coloured, cross-referenced, searchable

## The community

The Rust community goes to great lengths to be welcoming and
inclusive. The code of conduct is applied everywhere, and it
shows. For example,
[here's a user being asked not to make unconstructive criticisms of Go](http://article.gmane.org/gmane.comp.lang.rust.devel/4767/). This creates
a community that I want to part of.

help when I get stuck

Merged a fix for my bug.

sent a docs patch

discourse over mailing list

## Rust is still immature

Needed to use nightly

majority of stack overflow answers no longer compile

no easy to way to do timeouts is causing problems

several of my dependencies, even though they were mozilla/servo deps,
were not yet on crates.io.

## There's a huge learning curve

Writing a Unique iterator took a lot of head scratching, two IRC
questions and one SO question.

## Resulting programs are excellent

Fast, robust.

Rust is way past critical mass. The future looks extremely bright.
